datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations ConversationParticipant[]
  messages      Message[]
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  identifier String

  @@unique([identifier, token])
}

model Conversation {
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  participants          ConversationParticipant[]
  messages              Message[] @relation("conversationMessages")
  latestMessageId       String? @unique @db.ObjectId
  latestMessage         Message? @relation(name: "latestConversationMessage",fields: [latestMessageId],references: [id], onUpdate:NoAction,onDelete:NoAction)
}

model ConversationParticipant {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  user                  User    @relation(fields: [userId],references: [id])
  userId                String  @db.ObjectId
  conversation          Conversation   @relation(fields: [conversationId],references: [id])
  conversationId        String @db.ObjectId
  hasSeenLatestMessage  Boolean 
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Message {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  conversation      Conversation @relation(name: "conversationMessages",fields: [conversationId],references: [id])
  conversationId    String    @db.ObjectId
  isLatestIn        Conversation? @relation(name: "latestConversationMessage")
  sender            User      @relation(fields: [senderId],references: [id])
  body              String
  senderId          String    @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}